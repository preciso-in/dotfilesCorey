# #! /usr/bin/env zsh

FUNCTIONS_DIR=$(dirname $(readlink -f "$0"))
DOTFILES_DIR=$(dirname $FUNCTIONS_DIR)

# List all aliases
function listAliases() {
  echo "show = Show hidden files in Finder"
  echo "hide = Hide hidden files in Finder"
  echo "clean = Clean up the Trash and Downloads folders"
  echo "chknet = Ping Google and check the response time"
  echo "tosh = SSH to the Tosh server"
  echo "loadusb = Kill fsck process"
  echo "tree, treel2, treel3 = Tree aliases"
  echo "\nkcrns, kgns, kgpv, kdpv, kdelpv, kepv = Kubectl aliases"
  echo "\nst, sta, conf, cge, ci, co, cod, rh, aa, cldf, pr, br, bra, amend, ciam = Git aliases"
  echo "dc, dcn, dcnls, dcnlsa, dcnrm, dcns, dils, dilsnames, dirm, dcnlsnames = Docker aliases"
  echo "c. = Open current directory in VSCode"
  echo "f. = Open current directory in Finder"
}

# List all functions
function listFunctions() {
  echo "${RED}Functions Available For Use:${RESET}"
  echo "\n  ${YELLOW}listAliases${RESET}            = ${GREEN}List all aliases${RESET}"
  echo "  ${YELLOW}listVimMaps${RESET}            = ${GREEN}List all Vim maps${RESET}\n"
  echo "  ${YELLOW}addCardsFromFile${RESET}       = ${GREEN}Create CSV for importing into Anki from text file${RESET}"
  echo "\n  ${YELLOW}cdf${RESET}                    = ${GREEN}FuzzyFind folder from pattern. Excludes .vola, node_modules, .git, Library, Music, .local, .docker, Pictures${RESET}\n"
  echo "  ${YELLOW}chrome${RESET}                 = ${GREEN}Open Chrome with URL${RESET}"
  echo "  ${YELLOW}chtsht${RESET}                 = ${GREEN}Open cheatsheet${RESET}"
  echo "  ${YELLOW}cj${RESET}                     = ${GREEN}Fuzzy Open directory in VSCode${RESET}"
  echo "  ${YELLOW}count_gcloud_instances${RESET} = ${GREEN}Count GCloud instances${RESET}"
  echo "  ${YELLOW}copyTag${RESET}                = ${GREEN}Copy Anki tag to clipboard${RESET}"
  echo "  ${YELLOW}cursorf${RESET}                = ${GREEN}Fuzzy Open directory in VSCode${RESET}"
  echo "\n  ${YELLOW}getTagsFromAnki${RESET}        = ${GREEN}Extract tags from Anki CSV. To export all tags in Anki, move all decks into one parent deck and then export the parent deck.${RESET}\n"
  echo "  ${YELLOW}mkcd${RESET}                   = ${GREEN}Make directory and cd into it${RESET}"
  echo "\n  ${YELLOW}onlyYAMLKeys${RESET}           = ${GREEN}Returns YAML structure without the values from a given file or stdin${RESET}\n"
  echo "  ${YELLOW}touch2${RESET}                 = ${GREEN}Create file and directory if they don't exist${RESET}"
  echo "  ${YELLOW}vwti${RESET}                   = ${GREEN}Open ignoreWebtoonList.js in NVim${RESET}"
  echo "  ${YELLOW}vwtr${RESET}                   = ${GREEN}Open currentlyReadingList.js in NVim${RESET}"
  echo "  ${YELLOW}wtIgnore${RESET}               = ${GREEN}Add WT to ignoreWebtoonList.js${RESET}"
  echo "  ${YELLOW}wtRead${RESET}                 = ${GREEN}Add WT to currentlyReadingList.js${RESET}"
  echo "  ${YELLOW}zsh_remote${RESET}             = ${GREEN}Minimal ZSH config for remote terminal${RESET}"
}

chmod -R +x ${DOTFILES_DIR}/scripts/

function touch2() { mkdir -p "$(dirname "$1")" && touch "$1"; }

function mkcd() {
  local last=$(eval "echo \$$#")
  if [ ! -n "$last" ]; then
    echo "Enter a directory name"
  elif [ -d $last ]; then
    echo "\`$last' already exists"
  else
    mkdir $@ && cd $last
  fi
}

function cdf() {
  cd $(find . -prune -o -name .volta -prune -o -name node_modules -prune -o -name .terraform -prune -o -name .git -prune -o -name Library -prune -o -name Music -prune -o -name .local -prune -o -name .docker -prune -o -name Pictures -prune -o -type d -print | grep -v "Operation not permitted" | fzf)
}

function cj() {
  local CURR_DIR=$(pwd)
  if [[ "$1" == "." || "$1" == ".." ]]; then
    code .
  else
    j $1
    code $(pwd)
  fi
  cd $CURR_DIR
}

function cursorf() {
  local CURR_DIR=$(pwd)
  if [[ "$1" == "." || "$1" == ".." ]]; then
    code .
  else
    j $1
    cursor $(pwd)
  fi
  cd $CURR_DIR
}

function onlyYAMLKeys() {
  # if passed input is a string or a file
  if [ ! -t 0 ]; then
    local input=$(cat)
    echo "$input" | sed 's/: .*/:/' | yq
    return
    # if passed input is an argument for help
  elif [ -n "$1" ]; then
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
      echo "Returns YAML structure without the values from a given file or stdin"
      echo "Formats the output using yq"
      echo "Usage: onlyYAMLKeys <file>|<YAML string>"
      echo "  cat ~/.kube/config | onlyYAMLKeys"
      echo "  onlyYAMLKeys ~/.kube/config"
      echo "  onlyYAMLKeys --help"
      return
    fi
    echo $1 | sed 's/: .*/:/' | yq
    return
  else
    echo "No input is provided"

    echo "\nHelp for onlyYAMLKeys"
    echo "Returns YAML structure without the values from a given file or stdin"
    echo "Formats the output using yq"
    echo "Usage: onlyYAMLKeys <file>|<YAML string>"
    echo "  cat ~/.kube/config | onlyYAMLKeys"
    echo "  onlyYAMLKeys ~/.kube/config"
    echo "  onlyYAMLKeys --help"
    return
  fi
}

function count_gcloud_instances() {
  $HOME/scripts/count-gcloud-instances.sh
}

function zsh_remote() {
  curl -s https://gist.githubusercontent.com/nparkhe83/e34d4ab0ec66d6369131db8d8f3d8585/raw/9f52233422593685fe12477f6821aec7a057aff3/ZSh-for-remote.sh | pbcopy
  echo 'Copied Remote Script to Clipboard'
}

function chrome() {
  echo "hi"
  cd ~
  open -a "Google Chrome" "http://$1"
}

function chtsht() {
  $HOME/scripts/cheatsheet.sh
}

function wtAddToFile() {
  local File="$HOME/Desktop/work/Programming/personal-projects/chrome-extension/SiteCleaner/sites/others/webtoon/$2"

  # remove leading and trailing spaces in input
  local input=$(echo "$1" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

  local start_pattern=$3
  local end_pattern="].map(standardiseString);"

  # Get the JS Array from the file
  local wTArray=$(sed -n "/${start_pattern}/,/${end_pattern}/p" "${File}")

  # Remove JS syntax from the JS Array and only keep the WT names
  local wTList=$(echo "$wTArray" | sed -e '1s/.*\[//' -e '$s/\].*//')

  # Add new item to list
  local appendedWTList=$(echo "$wTList" | cat && echo "\"$input\",")

  # Remove leading and trailing spaces from each element in the new list
  local normalisedAppendedWTList=$(echo "$appendedWTList" | awk '{$1=$1; print}' | sort -u)

  # Remove empty lines from the new list
  local newWTList=$(echo "$normalisedAppendedWTList" | sed '/^[[:space:]]*$/d')

  # Reconstruct the JS Array
  echo $newWTList | sed -e "1s/^/$start_pattern\n/" >temp.js
  echo "$end_pattern" >>temp.js

  # Replace the original file with the new one
  mv temp.js $File

  prettier $File --write $File 1>/dev/null
}

function removeFromFile() {
  lineToBeRemovedString=$1

  local File="$HOME/Desktop/work/Programming/personal-projects/chrome-extension/SiteCleaner/sites/others/webtoon/$2"

  sed -i "/\"$lineToBeRemovedString\"/d" $File
}

function wtIgnore() {
  local input=$*
  local appendFile="ignoreWebtoonList.js"
  local removeFromFile="currentlyReadingList.js"
  local start_pattern="const readOrIgnoreWebtoons = \["

  wtAddToFile $input $appendFile $start_pattern

  # Remove the same from the Read list
  removeFromFile $input $removeFromFile
}

function wtRead() {
  local input=$*
  local appendFile="currentlyReadingList.js"
  local removeFromFile="ignoreWebtoonList.js"
  local start_pattern="const currentlyReadingList = \["

  wtAddToFile $input $appendFile $start_pattern

  # Remove the same from the ignore list
  removeFromFile $input $removeFromFile

}

function vwtr() {
  local File="$HOME/Desktop/work/Programming/personal-projects/chrome-extension/SiteCleaner/sites/others/webtoon/currentlyReadingList.js"

  vi $File
}

function vwti() {
  local File="$HOME/Desktop/work/Programming/personal-projects/chrome-extension/SiteCleaner/sites/others/webtoon/ignoreWebtoonList.js"

  vi $File
}

function addCardsFromFile() {
  local relativeInputPath=$1

  local absoluteInputPath=$(realpath $relativeInputPath)

  # Check if realpath succeeded
  if [[ $? -ne 0 ]]; then
    echo "Error: Unable to resolve path: $relativeInputPath"
    return 1
  fi

  echo -e "Absolute path: $absoluteInputPath"

  local CURR_DIR=$(pwd)

  cd ~/Desktop/work/Programming/personal-projects/anki-card-creator/src

  mkdir -p ~/Desktop/AnkiCardsCSV
  touch ~/Desktop/AnkiCardsCSV/output.csv

  ts-node index.ts $absoluteInputPath

  mv $absoluteInputPath ~/Desktop/ankiCards/CSVWorking

  cd $CURR_DIR
}

function getTagsFromAnki() {
  awk -F'\t' -v column=$1 '{print $column}' ~/Desktop/ankiCards/CSVWorking/All_Anki_Notes.txt | tr ' ' '\n' | sort --ignore-case | uniq >~/Desktop/ankiCards/CSVWorking/Anki-Tags.txt

  grep -vxFf ~/Desktop/ankiCards/CSVWorking/ignoreTags.txt ~/Desktop/ankiCards/CSVWorking/Anki-Tags.txt >~/Desktop/ankiCards/CSVWorking/Anki-Tags-temp.txt

  mv ~/Desktop/ankiCards/CSVWorking/Anki-Tags-temp.txt ~/Desktop/ankiCards/CSVWorking/Anki-Tags.txt
}

function copyTag() {
  cat ~/Desktop/ankiCards/CSVWorking/Anki-Tags.txt | fzf --multi | tr '\n' ' ' | pbcopy
}

function listVimMaps() {
  echo "${RED}Vim Maps Available For Use:${RESET}"
  echo "  ${YELLOW},c${RESET}            = ${GREEN}Copy to clipboard${RESET}"
  echo "  ${YELLOW},p${RESET}            = ${GREEN}Paste from clipboard${RESET}"
  echo "  ${YELLOW},g${RESET}            = ${GREEN}Format Card HTML for Anki${RESET}"

  echo "\n  ${YELLOW},ac${RESET}           = ${GREEN}Format Note - Adds 'Qn: ' and 'Ans: '${RESET}\n"
}

unset FUNCTIONS_DIR
unset DOTFILES_DIR
